@using System.Text.Json
@using System.Text
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Edit Project</h3>

<div class="btn-group">
    <EditForm Model="project"
              FormName="form-back-projects"
              OnSubmit="@(()=>{NavigateToCustomerList(); })">
        <button type="submit" class="btn btn-dark"> Customer List</button>
    </EditForm>
    &nbsp;
    <EditForm Model="project"
              FormName="form-back-project"
              OnSubmit="@(()=>{NavigateToProjectList(project.CustomerId); })">
        <button type="submit" class="btn btn-dark"> Back to Projects</button>
    </EditForm>

</div>

<br />
<br />

<EditForm Model="project" FormName="formEditProject" OnValidSubmit="HandleUpdateProject" Enhance="true">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <InputNumber @bind-Value="project.Id" hidden></InputNumber>
    <InputNumber @bind-Value="project.CustomerId" hidden></InputNumber>

    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Start Date</label>
        </div>
        <div class="col-6">
            <InputDate @bind-Value="project.StartDate"></InputDate>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.StartDate"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">End Date</label>
        </div>
        <div class="col-6">
            <InputDate @bind-Value="project.EndDate"></InputDate>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.EndDate"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Name</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.Name" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.Name"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Description</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.Description" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.Description"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Address1</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.Address1" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.Address1"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Address2</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.Address2" class="form-control"></InputText>
        </div>
        <div class="col">
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">City</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.City" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.City"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">State</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.State" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.State"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Postal</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.PostalCode" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.PostalCode"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">City Image</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.CityImage" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.CityImage"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">House Image</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.HouseImage" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.HouseImage"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Residential</label>
        </div>
        <div class="col-6">
            <InputCheckbox @bind-Value="project.IsResidential" class="form-check-input"></InputCheckbox>
        </div>
        <div class="col">
        </div>
    </div>

    <button type="submit" class="btn btn-dark"> Save </button>

</EditForm>

<br />
<br />
<span>@statusMessage</span>
<br />
<br />
<span>Json payload: @teststring</span>


@code {
    [SupplyParameterFromForm(FormName = "formEditProject")]
    private Project? project { get; set; } = new Project();

    [Parameter]
    public int projectId { get; set; }

    private string teststring = string.Empty;
    private string statusMessage = string.Empty;

    private void NavigateToProjectList(int id)
    {
        NavigationManager.NavigateTo($"/projects/list/{id}");
    }

    private void NavigateToCustomerList()
    {
        NavigationManager.NavigateTo($"/customer/list");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (project.Name == null)
        {
            project = await HttpClient.GetFromJsonAsync<Project>($"/api/projects/{projectId}");
        }
    }

    private async Task HandleUpdateProject()
    {
        await UpdateProjectAsync(project);
    }

    public async Task<bool> UpdateProjectAsync(Project updatedProject)
    {
        // Make the PUT request
        var response = await HttpClient.PutAsJsonAsync($"api/projects/{updatedProject.Id}", updatedProject);
        teststring = (JsonSerializer.Serialize(updatedProject));

        // Check for success status code
        if (response.IsSuccessStatusCode)
        {
            statusMessage = "Project updated successfully.";
            return true;
        }
        else
        {
            statusMessage = $"Failed to update project. Status code: {response.StatusCode}";
            return false;
        }
    }

}


