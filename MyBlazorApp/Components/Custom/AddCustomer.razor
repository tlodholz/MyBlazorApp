@using System.Text.Json
@inject HttpClient HttpClient

<EditForm Model="customer" FormName="formAddCustomer" OnValidSubmit="PostCustomer">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">First Name</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="customer.FirstName" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => customer.FirstName"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Last Name</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="customer.LastName" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => customer.LastName"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Email</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="customer.Email" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => customer.Email"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Phone</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="customer.Phone" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => customer.Phone"></ValidationMessage>
        </div>
    </div>
    <br />
    <br />
    <span>@statusMessage</span>
    <br />
    <br />
    <span>Json payload: @teststring</span>
    <br />
    <button class="btn btn-primary" type="submit">Update</button>

</EditForm>

<br />

<a href="/projects" class="btn btn-primary">Back to Projects</a>


@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "formAddCustomer")]
    private Customer? customer { get; set; }

    protected override void OnParametersSet()
    {
        customer ??= new Customer();
    }
    private string teststring = string.Empty;
    private string statusMessage = string.Empty;

    private async Task PostCustomer()
    {
      try
        {
            var response = await HttpClient.PostAsJsonAsync("api/customers", customer);

            teststring = (JsonSerializer.Serialize(customer));

            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Customer created successfully!";
            }
            else
            {
                statusMessage = "Failed to create customer.";
            }
        }
        catch (HttpRequestException ex)
        {
            // Handle network or connection errors
            statusMessage = "The API is not running or cannot be reached.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            // Handle unexpected errors
            statusMessage = "An unexpected error occurred.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

}
