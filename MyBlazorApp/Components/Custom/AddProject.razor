@using System.Text.Json
@inject HttpClient HttpClient

<EditForm Model="project" FormName="formAddProject" OnValidSubmit="PostProject">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <InputNumber @bind-Value="project.Id" hidden></InputNumber>
    <InputNumber @bind-Value="project.CustomerId" hidden></InputNumber>

    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Start Date</label>
        </div>
        <div class="col-6">
            <InputDate @bind-Value="project.StartDate"></InputDate>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.StartDate"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">End Date</label>
        </div>
        <div class="col-6">
            <InputDate @bind-Value="project.EndDate"></InputDate>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.EndDate"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Name</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.Name" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.Name"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Description</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.Description" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.Description"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Address1</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.Address1" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.Address1"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Address2</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.Address2" class="form-control"></InputText>
        </div>
        <div class="col">
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">City</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.City" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.City"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">State</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.State" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.State"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Postal</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.PostalCode" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.PostalCode"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">City Image</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.CityImage" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.CityImage"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">House Image</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="project.HouseImage" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => project.HouseImage"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Residential</label>
        </div>
        <div class="col-6">
            <InputCheckbox @bind-Value="project.IsResidential" class="form-check-input"></InputCheckbox>
        </div>
        <div class="col">
        </div>
    </div>

    <br />
    <span>@statusMessage</span>
    <br />
    <br />
    <span>Json payload: @teststring</span>
    <br />
    <button class="btn btn-primary" type="submit">Add</button>

</EditForm>

<br />

<a href="/projects" class="btn btn-primary">Back to Projects</a>


@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "formAddProject")]
    private Project? project { get; set; }

    protected override void OnParametersSet()
    {
        project ??= new Project();
    }
    private string teststring = string.Empty;
    private string statusMessage = string.Empty;

    [Parameter] public EventCallback<string> OnTabChange { get; set; }

    private async Task PostProject()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/projects", project);

            teststring = (JsonSerializer.Serialize(project));

            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Project created successfully!";
            }
            else
            {
                statusMessage = "Failed to create project.";
            }
        }
        catch (HttpRequestException ex)
        {
            // Handle network or connection errors
            statusMessage = "The API is not running or cannot be reached.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            // Handle unexpected errors
            statusMessage = "An unexpected error occurred.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

}

