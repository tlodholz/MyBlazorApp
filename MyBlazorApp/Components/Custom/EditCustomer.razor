@using System.Text.Json
@using System.Text
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Edit Customer</h3>

<div class="btn-group">
    <EditForm Model="customer"
              FormName="form-back-projects"
              OnSubmit="@(()=>{NavigateToCustomerList(); })">
        <button type="submit" class="btn btn-dark"> Customer List</button>
    </EditForm>
    &nbsp;
    <EditForm Model="customer"
              FormName="form-back-customers"
              OnSubmit="@(()=>{NavigateToProjectList(customer.Id); })">
        <button type="submit" class="btn btn-dark"> View Projects</button>
    </EditForm>
</div>

<br />
<br />

<EditForm Model="customer" FormName="formEditCustomer" OnValidSubmit="HandleUpdate" Enhance="true">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <InputNumber @bind-Value="customer.Id" hidden></InputNumber>

    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">First Name</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="customer.FirstName"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => customer.FirstName"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Last Name</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="customer.LastName"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => customer.LastName"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Email</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="customer.Email" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => customer.Email"></ValidationMessage>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Phone</label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="customer.Phone" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => customer.Phone"></ValidationMessage>
        </div>
    </div>
    
    <button type="submit" class="btn btn-dark"> Save </button>

</EditForm>

<br />
<br />
<span>@statusMessage</span>
<br />
<br />
<span>Json payload: @teststring</span>

@code {
    [SupplyParameterFromForm(FormName = "formEditCustomer")]
    private Customer? customer { get; set; } = new Customer();

    [Parameter]
    public int customerId { get; set; }

    private string teststring = string.Empty;
    private string statusMessage = string.Empty;

    private void NavigateToProjectList(int id)
    {
        NavigationManager.NavigateTo($"/projects/list/{id}");
    }

    private void NavigateToCustomerList()
    {
        NavigationManager.NavigateTo($"/customer/list");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (customer.FirstName == null)
        {
            customer = await HttpClient.GetFromJsonAsync<Customer>($"/api/customers/{customerId}");
        }
    }

    private async Task HandleUpdate()
    {
        await UpdateCustomerAsync(customer);
    }

    public async Task<bool> UpdateCustomerAsync(Customer updatedCustomer)
    {
        // Make the PUT request
        var response = await HttpClient.PutAsJsonAsync($"api/customers/{updatedCustomer.Id}", updatedCustomer);
        teststring = (JsonSerializer.Serialize(updatedCustomer));

        // Check for success status code
        if (response.IsSuccessStatusCode)
        {
            statusMessage = "Customer updated successfully.";
            return true;
        }
        else
        {
            statusMessage = $"Failed to update customer. Status code: {response.StatusCode}";
            return false;
        }
    }
}
