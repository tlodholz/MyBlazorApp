@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<EditForm Model="customer"
          FormName="@($"form-add-project")"
          OnSubmit="@(()=>{NavigateToAddProject(customer.Id); })">
    <button type="submit" class="btn btn-dark"> Add Project</button>
</EditForm>

@if (projects == null)
{
    <p>Loading...</p>
}
else if (!projects.Any())
{
    <p>No projects found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Timeline</th>
                <th>Address</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.Name</td>
                    <td>@project.Description</td>
                    <td>@((MarkupString)$"{project.StartDate} -<br />{project.EndDate}")</td>
                    <td>
                        @((MarkupString)$"{project.Address1}<br />{project.City}, {project.State}<br />{project.PostalCode}")
                    </td>
                    <td>
                        <img src="@($"/images/houses/{project.HouseImage}")" alt="City Image" style="width:8rem; height:6rem;" />
                    </td>
                    <td>
                        <div class="btn-group">
                        <EditForm 
                            Model="project"
                            FormName="@($"form-project-details-{project.Id}")"
                            OnSubmit="@(()=>{ProjectDetails(project.Id); })">
                            <button type="submit" class="btn btn-primary"> Details</button>
                            </EditForm>    &nbsp;
                        <EditForm Model="project"
                            FormName="@($"form-projects-edit-{project.Id}")"
                            OnSubmit="@(()=>{EditProject(project.Id); })">
                            <button type="submit" class="btn btn-dark"> Edit</button>
                            </EditForm>    &nbsp;
                        <EditForm Model="project"
                            FormName="@($"form-project-delete-{project.Id}")"
                            OnSubmit="@(() => HandleDeleteSubmit(project.Id))">
                            <button type="submit" class="btn btn-danger"> Delete</button>
                            </EditForm>    &nbsp;
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int CustomerId { get; set; }
    private Customer? customer { get; set; }
    private List<Project> projects;

    protected override async Task OnInitializedAsync()
    {
        customer ??= new Customer { Id = CustomerId };

        try
        {
            // Fetch a list of projects with the customer id from the API endpoint
            projects ??= await HttpClient.GetFromJsonAsync<List<Project>>($"/api/projects/by-customer/{CustomerId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customers: {ex.Message}");
        }
    }

    private void NavigateToAddProject(int id)
    {
        NavigationManager.NavigateTo($"/projects/add/{id}");
    }

    private void ProjectDetails(int id)
    {

    }

    private void EditProject(int id)
    {
        NavigationManager.NavigateTo($"/projects/edit/{id}");
    }

    private async Task HandleDeleteSubmit(int projectId)
    {
        await DeleteProject(projectId);
    }

    private async Task DeleteProject(int id)
    {
        try
        {
            var response = await HttpClient.DeleteAsync($"api/projects/{id}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Project with ID {id} has been deleted successfully.");
 
                // Remove the customer from the list after successful deletion
                var projectToRemove = projects.FirstOrDefault(c => c.Id == id);
                if (projectToRemove != null)
                {
                    projects.Remove(projectToRemove);
                    Console.WriteLine($"Project with ID {id} has been deleted and removed from the list.");
                }
            }
            else
            {
                Console.WriteLine($"Failed to delete project with ID {id}. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while deleting the project: {ex.Message}");
        }
    }
}