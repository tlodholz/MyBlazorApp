@inject HttpClient HttpClient

<h3>Customer List</h3>

@if (customers == null)
{
    <p>Loading...</p>
}
else if (!customers.Any())
{
    <p>No customers found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Phone</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Phone</td>
                    <td>@customer.Email</td>
                    <td>
                        <div class="btn-group">
                        <EditForm 
                            Model="customer" 
                            FormName="@($"form-details-customer-{customer.Id}")"
                            OnSubmit="@(()=>{ShowDetails(customer.Id); })">
                            <button type="submit" class="btn btn-primary"> Show</button>
                        </EditForm>
                        <EditForm 
                            Model="customer"
                            FormName="@($"form-edit-customer-{customer.Id}")"
                            OnSubmit="@(()=>{EditCustomer(customer.Id); })">
                            <button type="submit" class="btn btn-dark"> Edit</button>
                        </EditForm>
                        <EditForm 
                            Model="customer"
                            FormName="@($"form-delete-customer-{customer.Id}")"
                            OnSubmit="@(()=>{DeleteCustomer(customer.Id); })">
                            <button type="submit" class="btn btn-danger"> Delete</button>
                        </EditForm>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Customer> customers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch customers from the API endpoint
            customers = await HttpClient.GetFromJsonAsync<List<Customer>>("api/customers");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customers: {ex.Message}");
        }
    }

    private void ShowDetails(int id)
    {
        Console.WriteLine($"Show details for customer with ID: {id}");
        // Add logic to navigate to the details page or display a modal
    }

    private void EditCustomer(int id)
    {
        Console.WriteLine($"Edit customer with ID: {id}");
        // Add logic to navigate to the edit page or display a form
    }

    private void DeleteCustomer(int id)
    {
        Console.WriteLine($"Delete customer with ID: {id}");
        // Add logic to handle deletion
    }
}