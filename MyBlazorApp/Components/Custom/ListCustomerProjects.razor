@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@rendermode InteractiveServer

<EditForm Model="customer"
          FormName="@($"form-add-project")"
          OnSubmit="@(()=>{NavigateToAddProject(customer.Id); })">
    <button type="submit" class="btn btn-dark"> Add Project</button>
</EditForm>

@if (projects == null)
{
    <p>Loading...</p>
}
else if (!projects.Any())
{
    <p>No projects found.</p>
}
else
{
    <div class="sorting-options">
        <input type="radio" value="StartDate" @onchange="HandleSortChange" checked="@(SelectedSort == "StartDate")" /> Start Date
        <input type="radio" value="EndDate" @onchange="HandleSortChange" checked="@(SelectedSort == "EndDate")" /> End Date
        <input type="radio" value="Name" @onchange="HandleSortChange" checked="@(SelectedSort == "Name")" /> Name
        <input type="radio" value="Description" @onchange="HandleSortChange" checked="@(SelectedSort == "Description")" /> Description
        <input type="radio" value="City" @onchange="HandleSortChange" checked="@(SelectedSort == "City")" /> City
    </div>
    <input type="text" @bind="SearchText" placeholder="Search projects..." />
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Timeline</th>
                <th>Address</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in SortedAndFilteredProjects.Skip((CurrentPage - 1) * PageSize).Take(PageSize))
            {
                <tr>
                    <td>@project.Name</td>
                    <td>@project.Description</td>
                    <td>@((MarkupString)$"{project.StartDate} -<br />{project.EndDate}")</td>
                    <td>
                        @((MarkupString)$"{project.Address1}<br />{project.City}, {project.State}<br />{project.PostalCode}")
                    </td>
                    <td>
                        <img src="@($"/images/houses/{project.HouseImage}")" alt="City Image" style="width:8rem; height:6rem;" />
                    </td>
                    <td>
                        <div class="btn-group">
                        <EditForm 
                            Model="project"
                            FormName="@($"form-project-details-{project.Id}")"
                            OnSubmit="@(()=>{ProjectDetails(project.Id); })">
                            <button type="submit" class="btn btn-primary"> Assign</button>
                            </EditForm>    &nbsp;
                        <EditForm Model="project"
                            FormName="@($"form-projects-edit-{project.Id}")"
                            OnSubmit="@(()=>{EditProject(project.Id); })">
                            <button type="submit" class="btn btn-dark"> Edit</button>
                            </EditForm>    &nbsp;
                        <EditForm Model="project"
                            FormName="@($"form-project-delete-{project.Id}")"
                            OnSubmit="@(() => HandleDeleteSubmit(project.Id))">
                            <button type="submit" class="btn btn-danger"> Delete</button>
                            </EditForm>    &nbsp;
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="pagination-controls">
        <button @onclick="PreviousPage" disabled="@(CurrentPage == 1)">Previous</button>
        @for (int i = 1; i <= TotalPages; i++)
        {
            var pageNumber = i; // Create a scoped variable to avoid capturing issues
            <button @onclick="() => GoToPage(pageNumber)" class="@(CurrentPage == pageNumber ? "active" : "")">@pageNumber</button>
        }
        <button @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">Next</button>
    </div>

}

@code {
    [Parameter]
    public int CustomerId { get; set; }
    private Customer? customer { get; set; }
    private List<Project> projects;

    protected override async Task OnInitializedAsync()
    {
        customer ??= new Customer { Id = CustomerId };

        try
        {
            // Fetch a list of projects with the customer id from the API endpoint
            projects ??= await HttpClient.GetFromJsonAsync<List<Project>>($"/api/projects/by-customer/{CustomerId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customers: {ex.Message}");
        }
    }
    // PAGINATION AND SORTING

    // sorting
    private string SelectedSort = "StartDate";

    // pagination
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5; // Adjust the number of items per page
    private int TotalPages => (int)Math.Ceiling((double)projects.Count / PageSize);

    // search bar
    private string SearchText { get; set; } = "";

    // main filter
    private IEnumerable<Project> SortedAndFilteredProjects => projects
    .OrderBy(c => (object)(
        SelectedSort == "StartDate" ? c.StartDate :
        SelectedSort == "EndDate" ? c.EndDate :
        SelectedSort == "Name" ? c.Name :
        SelectedSort == "Description" ? c.Description :
        SelectedSort == "City" ? c.City :
        c.Address1)) // Sort first
    .Where(c => string.IsNullOrEmpty(SearchText) ||
        c.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
        c.Description.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
        c.City.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
        c.StartDate.ToString().Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
        c.EndDate.ToString().Contains(SearchText, StringComparison.OrdinalIgnoreCase)); // Filter after sorting

    // pagination button events
    private void HandleSortChange(ChangeEventArgs e)
    {
        SelectedSort = e.Value.ToString();
    }

    private void GoToPage(int page)
    {
        CurrentPage = page;
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1) CurrentPage--;
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages) CurrentPage++;
    }
    private void NavigateToAddProject(int id)
    {
        NavigationManager.NavigateTo($"/projects/add/{id}");
    }

    // CRUD OPERATIONS FOR LINE ITEM BUTTONS
    private void ProjectDetails(int id)
    {
        NavigationManager.NavigateTo($"/projects/assignments/list/{id}");
    }

    private void EditProject(int id)
    {
        NavigationManager.NavigateTo($"/projects/edit/{id}");
    }

    private async Task HandleDeleteSubmit(int projectId)
    {
        await DeleteProject(projectId);
    }

    private async Task DeleteProject(int id)
    {
        try
        {
            var response = await HttpClient.DeleteAsync($"api/projects/{id}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Project with ID {id} has been deleted successfully.");
 
                // Remove the customer from the list after successful deletion
                var projectToRemove = projects.FirstOrDefault(c => c.Id == id);
                if (projectToRemove != null)
                {
                    projects.Remove(projectToRemove);
                    Console.WriteLine($"Project with ID {id} has been deleted and removed from the list.");
                }
            }
            else
            {
                Console.WriteLine($"Failed to delete project with ID {id}. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while deleting the project: {ex.Message}");
        }
    }
}